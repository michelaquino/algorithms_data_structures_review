package main

import (
	"fmt"
	"sort"
)

// https://leetcode.com/problems/array-partition/
func main() {
	// nums := []int{1, 4, 3, 2}
	// nums := []int{6, 2, 6, 5, 1, 2}
	// nums := []int{1, 6, 7, 5, 6, 7}
	// nums := []int{6214, -2290, 2833, -7908}
	nums := []int{750, -6944, 2360, -1825, -6118, 1590, 9662, 534, 6297, -8386, -1379, -43, -9929, -6705, 2597, -755, -831, -7535, 9749, -3990, 38, -4169, -511, -8272, -9888, -8956, -1416, 938, -8321, -3890, 1228, 8251, -9710, 1941, -6560, 3692, -5383, 1630, -945, 5703, -9439, 6271, 1905, -6000, 6012, 9648, -1201, 8895, -1580, -1376, 3641, 3352, -164, 3764, 8503, -4103, 5940, -1954, -8908, -5412, -5332, -9417, 7380, -2677, -9476, 8399, -6955, -2375, 7810, -2744, -5133, -9137, 5072, -6809, -1976, 5902, 6022, -2772, 7303, 816, 6622, 8094, 5038, -7849, -5316, 1260, 3662, 6733, 2690, 9119, 3573, -6045, 6043, 7195, -5844, -1023, 2893, -1099, 6571, -5215, 8759, -4358, 7416, 5527, -5127, 9008, -7902, -6659, -5009, 310, -8109, 807, -6461, 805, -2015, -4476, 6226, 7349, -2, 5938, 7412, 8943, 3128, -9262, -4785, 3952, -3764, 8030, -475, -7220, -6075, 3569, 3957, 10000, 5431, -5875, 7550, 2508, -579, -4094, -9472, 478, 9503, -8572, 7554, -268, 9845, -1627, 8270, 6152, -4597, -4220, 1385, -6600, 2151, -5498, -7224, 4751, 7958, 5958, -5926, -7363, 7325, 6848, -2327, 9557, 6399, -2078, -9852, 2440, 7526, -5960, 3442, 154, 9919, -3792, -9541, 904, 3801, -5763, 4840, 9222, 5206, -2281, 6735, 3441, -4805, -8790, 8751, 3475, 4658, -8025, -2511, -5387, 8987, 1562, -4799, 261, 115, -1370}

	fmt.Println(arrayPairSum(nums))
	fmt.Println(arrayPairSumCountingSort(nums))
}

func arrayPairSum(nums []int) int {
	sort.SliceStable(nums, func(i, j int) bool {
		return nums[i] < nums[j]
	})

	sum := 0
	for i := 0; i < len(nums); i += 2 {
		sum += nums[i]
	}

	return sum
}

func arrayPairSumCountingSort(nums []int) int {
	baseNumber := int(1e4) + 1
	countingSort := make([]int, 2*baseNumber)
	for _, number := range nums {
		countingSort[number+baseNumber] += 1
	}

	sum := 0
	isEven := true
	for i := 0; i < len(countingSort); i++ {
		for {
			if countingSort[i] == 0 {
				break
			}

			if isEven {
				sum += i - baseNumber
			}

			countingSort[i]--
			isEven = !isEven
		}
	}

	return sum
}
